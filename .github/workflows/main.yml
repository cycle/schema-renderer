name: build-v1

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  test:
    name: Build (${{matrix.php}}, ${{ matrix.os }}, ${{ matrix.stability }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: [ '7.4', '8.0', '8.1' ]
        os: [ ubuntu-latest ]
        stability: [ prefer-lowest, prefer-stable ]

    steps:
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          # PHP Extras
          extensions: pdo, pdo_mysql, pdo_sqlite, sockets
          coverage: pcov
          tools: pecl
          ini-values: "memory_limit=-1"
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-${{ matrix.stability }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-

      - name: Install dependencies with composer
        if: matrix.php-version != '8.2'
        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install dependencies with composer php 8.2
        if: matrix.php-version == '8.2'
        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi --ignore-platform-reqs

      # Execution
      - name: Execute Tests
        run: vendor/bin/phpunit --coverage-clover=coverage.clover
      - name: Upload Coverage To Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.clover
          fail_ci_if_error: false
      - name: Upload coverage to Scrutinizer
        continue-on-error: true # if is fork
        uses: sudo-bot/action-scrutinizer@latest
        with:
          cli-args: "--format=php-clover coverage.clover"